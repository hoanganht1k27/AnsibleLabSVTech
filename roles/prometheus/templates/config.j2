# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
#alerting:
#  alertmanagers:
#    - static_configs:
#        - targets:
#          - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  - "rules/myrules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["127.0.0.1:{{ prometheus_port }}"]
  - job_name: 'pve'
    static_configs:
{% for proxmox in proxmox_hosts %}
      - targets:
        - {{ proxmox }}
        labels:
          hypervisor_type: "proxmox"
{% endfor %}
    metrics_path: /pve
    params:
      module: [default]
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ pve_exporter_host }}:{{ pve_exporter_port }}  # PVE exporter.
  - job_name: "node_exporter"
    static_configs:
      - targets:
{% for host in node_exporter_hosts %}
        - {{ host.ip }}:{{ host.port }}
{% endfor %}

  - job_name: 'vmware_esx'
    metrics_path: '/metrics'
    static_configs:
    - targets: 
{% for vmware in vmware_hosts %}
      - {{ vmware.ip }}:{{ vmware.port }}
{% endfor %}
      labels:
        hypervisor_type: "vmware"
