    - name: PROXMOX [Step 00] - Check where target is proxmox or not
      shell: grep -q "Proxmox" /etc/issue
      register: is_proxmox
      ignore_errors: true
    - name: PROXMOX debug
      debug:
        var: is_proxmox.failed
    - name: PROXMOX [Step 01] - Write host to list
      lineinfile:
        path: "{{ pve_exporter_list_file_path }}"
        line: "{{ ansible_host }}"
        create: true
        state: present
      delegate_to: localhost
      when: is_proxmox.failed == false
    - name: PROXMOX [Step 01] - Add pve monitor group
      shell: "pveum group add {{ pve_monitor_group }} -comment \"This is group for monitoring\""
      ignore_errors: yes
      when: is_proxmox.failed == false
    - name: PROXMOX [Step 02] - Add PVEAuditor to monitor group
      shell: "pveum acl modify / -group {{ pve_monitor_group }} -role PVEAuditor"
      ignore_errors: yes
      when: is_proxmox.failed == false
    - name: PROXMOX [Step 03] - Add pve monitor user
      shell: "pveum user add {{ pve_monitor_user }}@pve -comment \"This user is for monitoring\" -password {{ pve_monitor_user_password }}"
      ignore_errors: yes
      when: is_proxmox.failed == false
    - name: PROXMOX [Step 04] - Add pve monitor user to monitor group
      shell: "pveum user modify {{ pve_monitor_user }}@pve -group {{ pve_monitor_group }}"
      ignore_errors: yes
      when: is_proxmox.failed == false
    - name: PROXMOX [Step 05] - Read list file content
      set_fact:
        file_contents: "{{ lookup('file', pve_exporter_list_file_path).splitlines() }}"
      delegate_to: localhost
    - name: PROXMOX [Step 06] - Debug
      debug:
        var: file_contents
    - name: PROXMOX [Step 07] - Write content to prometheus
      lineinfile:
        insertafter: "- targets:"
        line: "  - {{ item }}"
        path: "{{ pve_exporter_config_file_path }}"
      loop: "{{ file_contents }}"
      when: is_prometheus is defined
